{"mappings":"AAAAA,QAAQC,IAAI,uDAoRZ,MAYMC,EAnBN,UAA2BC,UAAEA,EAASC,SAAEA,EAAQC,QAAEA,KAAYC,IAC5D,MAAO,IACFA,EACHC,SAAU,GAAGJ,KAAaC,I,CAgBdI,CAZF,CACZC,GAAI,EACJN,UAAW,QACXC,SAAU,SACVM,MAAO,oBACPC,YAAa,GACbN,QAAS,CACPO,MAAO,OACPC,KAAM,WAKVb,QAAQC,IAAIC","sources":["src/js/06-module-3_object_Lesson-6.js"],"sourcesContent":["console.log('Модуль 3 Заняття 6. Деструктуризація та rest/spread');\n\n/** Кахут */\n// const user = {\n//   username: \"Grut\"\n//   //... 100\n// }\n\n// const {username} = user\n\n// function foo({username} = {}) {\n//   console.log(username)\n// }\n\n// foo()\n/** ---------------- */\n\n// ## Example 1 - Деструктуризація\n\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору\n// незалежних аргументів.\n\n// ```js\nfunction calcBMI({ weight, height }) {\n  const numericWeight = Number(weight.replace(',', '.'));\n  const numericHeight = Number(height.replace(',', '.'));\n  return Number((numericWeight / numericHeight ** 2).toFixed(1));\n}\n\nconst user = {\n  weight: '88,3',\n  height: '1.75',\n};\n\n// // Було\n// console.log(calcBMI('88,3', '1.75'));\n// // console.log(calcBMI('68,3', '1.65'));\n// // console.log(calcBMI('118,3', '1.95'));\n\n// // Очікується\n// console.log(\n//   calcBMI({\n//     weight: '88,3',\n//     height: '1.75',\n//   }),\n// );\n// console.log(\n//   calcBMI({\n//     weight: '68,3',\n//     height: '1.65',\n//   }),\n// );\n// console.log(\n//   calcBMI({\n//     weight: '118,3',\n//     height: '1.95',\n//   }),\n// );\n// ```\n\n// ## Example 2 - Деструктуризація\n\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору\n// незалежних аргументів.\n\n// ```js\n\n// const userA = {\n//   name: 'John',\n//   surname: 'Smith',\n//   age: 24\n// }\n\n// function printUser({name, surname, age = 'unknow'} = {}) {\n//   console.log(`User is ${name} ${surname}, his age is ${age}`)\n// }\n\n// function hello(hey = 'No argument') {\n//   console.log(hey)\n// }\n\n// printUser(userA)\n// printUser()\n\n// hello('asdsadsad')\n// hello()\n\n// function hello() {\n//   console.log('hello')\n// }\n// hello(1,2,34,55)\n\n// function printContactsInfo({names = '', phones = ''} = {}) {\n//   console.log(names, phones)\n//   const nameList = names.split(',');\n//   const phoneList = phones.split(',');\n\n//   for (let i = 0; i < nameList.length; i += 1) {\n//     console.log(`${nameList[i]}: ${phoneList[i]}`);\n//   }\n// }\n\n// // Було\n// // printContactsInfo(\n// //   'Jacob,William,Solomon,Artemis',\n// //   '89001234567,89001112233,890055566377,890055566300',\n// // );\n\n// printContactsInfo()\n\n// // Очікується\n// printContactsInfo({\n//   // names: 'Jacob,William,Solomon,Artemis',\n//   phones: '89001234567,89001112233,890055566377,890055566300',\n// });\n// ```\n\n// ## Example 3 - Глибока деструктуризація\n\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору\n// незалежних аргументів.\n\n// ```js\n// function getBotReport(companyName, repairBots, defenceBots) {\n//   return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n// }\n\nfunction getBotReport({\n  companyName,\n  bots: { repair: repairBots, defence: defenceBots },\n}) {\n  return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n}\n\nconst boatCompany = {\n  companyName: 'Cyberdyne Systems',\n  bots: {\n    repair: 150,\n    defence: 50,\n  },\n};\n\n// // Було\n// console.log(getBotReport('Cyberdyne Systems', 150, 50));\n\n// // Очікується\n// console.log(getBotReport(boatCompany)); // \"Cyberdyne Systems has 200 bots in stock\"\n// ```\n\n// ## Example 4 - Деструктуризація\n\n// Напиши функцію, що приймає об'єкт параметрів із властивостями\n// `companyName` та `stock` та виводить звіт про кількість товарів на складі будь-якої\n// компанії.\n\n// ```js\nfunction getStockReport({ companyName, stock }) {\n  let stockAmount = 0;\n\n  console.log(companyName);\n  console.log(stock);\n\n  const stockValues = Object.values(stock);\n  console.log(stockValues);\n\n  for (const value of stockValues) {\n    stockAmount += value;\n  }\n\n  return `${companyName} has ${stockAmount} bots`;\n}\n\nconst company1 = {\n  companyName: 'Cyberdyne Systems',\n  stock: {\n    repairBots: 150,\n    defenceBots: 50,\n    defenceBots2: 50,\n    defenceBots1: 50,\n  },\n};\n\n// const report = getStockReport(company1);\n// console.log(report)\n\n// console.log(\n//   getStockReport({\n//     companyName: 'Cyberdyne Systems',\n//     stock: {\n//       repairBots: 150,\n//       defenceBots: 50,\n//     },\n//   }),\n// ); // \"Cyberdyne Systems has 200 items in stock\"\n\n// console.log(\n//   getStockReport({\n//     companyName: 'Belacci',\n//     stock: {\n//       shoes: 20,\n//       skirts: 10,\n//       hats: 5,\n//     },\n//   }),\n// ); // \"Belacci has 35 item in stock\"\n// ```\n\n// ## Example 5 - Операція spread\n\n// Доповни функцію `createContact(partialContact)` так, щоб вона повертала новий\n// об'єкт контакту з доданими властивостями `id` та `createdAt`, а також `list` зі\n// значенням \"default\" якщо в `partialContact` немає такої властивості.\n\n// ```js\n//1\nfunction createContact({ name, email, list = 'default' }) {\n  return {\n    name,\n    email,\n    list,\n    id: generateId(),\n    createdAt: Date.now(),\n  };\n}\n\n//2\nfunction createContact(partialContact) {\n  return {\n    list: 'default',\n    ...partialContact,\n    id: generateId(),\n    createdAt: Date.now(),\n  };\n}\n\n// const contact1 = {\n//   name: 'Mango',\n//   email: 'mango@mail.com',\n//   list: 'friends',\n// }\n\n// const newContact = createContact(contact1);\n// console.log(newContact)\n\n// console.log(\n//   createContact({\n//     name: 'Mango',\n//     email: 'mango@mail.com',\n//     list: 'friends',\n//   }),\n// );\n// console.log(\n//   createContact({\n//     name: 'Poly',\n//     email: 'poly@hotmail.com',\n//   }),\n// );\n\nfunction generateId() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n// ```\n\n// ## Example 6 - Операція rest\n\n// Напиши функцію `transformUsername(user)` так, щоб вона повертала новий об'єкт із властивістю\n// `fullName`, замість `firstName` та `lastName`.\n\n// ```js\nfunction transformUsername({ firstName, lastName, friends, ...props }) {\n  return {\n    ...props,\n    fullName: `${firstName} ${lastName}`,\n  };\n}\n\nconst user1 = {\n  id: 1,\n  firstName: 'Jacob',\n  lastName: 'Mercer',\n  email: 'j.mercer@mail.com',\n  friendCount: 40,\n  friends: {\n    Anton: 'best',\n    Ivan: 'so so',\n  },\n};\n\nconst newUser = transformUsername(user1);\nconsole.log(newUser);\n\n// console.log(\n//   transformUsername({\n//     id: 1,\n//     firstName: 'Jacob',\n//     lastName: 'Mercer',\n//     email: 'j.mercer@mail.com',\n//     friendCount: 40,\n//   }),\n// );\n\n// console.log(\n//   transformUsername({\n//     id: 2,\n//     firstName: 'Adrian',\n//     lastName: 'Cross',\n//     email: 'a.cross@hotmail.com',\n//     friendCount: 20,\n//   }),\n// );\n// ```\n\n// //Ліво - rest\n// function multiply(...args) {\n//   const name = 'Artem';\n//   console.log(args); // массив всех аргументов\n\n//   return {};\n// }\n\n// //Право - spread\n// const third = {\n//   propB: 20,\n//   ...first,\n//   ...second,\n// };\n\n// console.log(third); // { propA: 5, propB: 10, propC: 15 }\n"],"names":["console","log","$30f0c7a2bb8f9c90$var$newUser","firstName","lastName","friends","props","fullName","$30f0c7a2bb8f9c90$var$transformUsername","id","email","friendCount","Anton","Ivan"],"version":3,"file":"06-module-3_object_Lesson-6.38aea34f.js.map"}