{"mappings":"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","sources":["src/js/08-module-4_iterative_methods_lesson-8.js"],"sourcesContent":["console.log('# Модуль 4. Заняття 8. Перебираючі методи масиву');\n\n// ## Колекція об'єктів для всіх прикладів з автомобілями\n\nconst cars = [\n  {\n    make: 'Honda',\n    model: 'CR-V',\n    type: 'suv',\n    amount: 14,\n    price: 24045,\n    onSale: true,\n  },\n  {\n    make: 'Honda',\n    model: 'Accord',\n    type: 'sedan',\n    amount: 2,\n    price: 22455,\n    onSale: true,\n  },\n  {\n    make: 'Mazda',\n    model: 'Mazda 6',\n    type: 'sedan',\n    amount: 8,\n    price: 24195,\n    onSale: false,\n  },\n  {\n    make: 'Mazda',\n    model: 'CX-9',\n    type: 'suv',\n    amount: 7,\n    price: 31520,\n    onSale: true,\n  },\n  {\n    make: 'Toyota',\n    model: '4Runner',\n    type: 'suv',\n    amount: 19,\n    price: 34210,\n    onSale: false,\n  },\n  {\n    make: 'Toyota',\n    model: 'Sequoia',\n    type: 'suv',\n    amount: 16,\n    price: 45560,\n    onSale: false,\n  },\n  {\n    make: 'Toyota',\n    model: 'Tacoma',\n    type: 'truck',\n    amount: 4,\n    price: 24320,\n    onSale: true,\n  },\n  {\n    make: 'Ford',\n    model: 'F-150',\n    type: 'truck',\n    amount: 11,\n    price: 27110,\n    onSale: true,\n  },\n  {\n    make: 'Ford',\n    model: 'Fusion',\n    type: 'sedan',\n    amount: 13,\n    price: 22120,\n    onSale: true,\n  },\n  {\n    make: 'Ford',\n    model: 'Explorer',\n    type: 'suv',\n    amount: 6,\n    price: 31660,\n    onSale: false,\n  },\n];\n\nconsole.log('---Example 1---');\n\n// ## Example 1 - Метод map\n// створи функцію яка повертає масив моделей (поле model) всіх\n// автомобілів.\n\n// 1\n// const getModels = carsArray => {\n//   const result = carsArray.map(carItem => {\n//     return carItem.model\n//   })\n\n//   return result\n// }\n\n// 2\nconst getModels = carsArray => carsArray.map(({ model }) => model);\n\n// console.log(getModels(cars))\n\nconsole.log('---Example 2---');\n\n// ## Example 2 - Метод map\n// створи функцію яка повертає нову колекцію з урахуванням знижки.\n// функція приймає два параметри, перший то є колекція обʼєктів(авто),\n// другий то є коефіцієнт знижки (20% = 0.2)\n\n//1\n// const applySale = (carsArray, sale) => {\n//   const result = carsArray.map(car => {\n\n//     const obj = {\n//       ...car,\n//       price: car.price - (car.price * sale)\n//     }\n\n//     return obj\n//   });\n\n//   return result\n// }\n\n//2\nconst applySale = (carsArray, sale) =>\n  carsArray.map(car => {\n    return {\n      ...car,\n      price: car.price - car.price * sale,\n    };\n  });\n\n// console.table(applySale(cars, 0.2))\n\nconsole.log('---Example 3---');\n\n// ## Example 3 - Метод filter\n// Створити функцію яка повертає колекцію авто, ціна яких\n// менша за передане значення\n\n// const filterCars = (carsArr, threshold) => {\n//   const result = carsArr.filter(el => {\n//     if (el.price < threshold) {\n//       return true\n//     }\n//   });\n\n//   return result\n// };\n// const filterCars = (carsArr, threshold) => carsArr.filter(({price}) => price < threshold)\n\n// console.table(filterCars(cars, 24000));\n\nconsole.log('---Example 4---');\n\n// ## Example 4 - Метод filter\n// Створи функцію яка повертає масив автомобілів властивість\n// onSale яких true.\n\n//1\nconst getCarsOnSale = carsArr => carsArr.filter(el => el.onSale);\n\n//2\n// function getCarsOnSale(carsArr) {\n//   const result = carsArr.filter( el => {\n//     if(el.onSale === true) {\n//       return true\n//     }\n//   })\n\n//   return result\n// }\n\n// console.table(getCarsOnSale(cars))\n\nconsole.log('---Example 5---');\n\n// ## Example 5 - Метод find\n// Створи функцію яка повертає авто за назвою моделі\n//1\n// const getCarByModel = (carsArr, model) => carsArr.find(el => el.model === model);\n\n//2 Пошук авто виключно за моделю\n// function getCarByModel(carsArr, model) {\n//   const result = carsArr.find(function(el) {\n//     if(el.model === model) {\n//       return true\n//     }\n//   });\n\n//   return result\n// }\n\n// console.log(getCarByModel(cars, 'Fusion'));\n\n// Пошук авто за властивістю\n// function getCarByProp(carsArr, prop, value) {\n//   const result = carsArr.find(function(el) {\n//     if(el[prop] === value) {\n//       return true\n//     }\n//   });\n\n//   return result\n// }\n\n// console.log(getCarByProp(cars, 'amount', 14));\n\nconsole.log('---Example 6---');\n\n// ## Example 6 - Метод sort\n// Нехай функція `sortByAscendingAmount` повертає новий масив автомобілів відсортований за\n// зростанням `amount`.\n\n// ```js\n//1\n// const sortByAscendingAmount = cars => {\n\n//   return [...cars].sort((itm1, itm2) => {\n//     // if (a.amount > b.amount) return 1;\n//     // if (a.amount < b.amount) return -1;\n\n//     // return 0\n\n//     return itm1.amount > itm2.amount ? 1 : -1\n//   })\n\n// };\n\n//2\n// const sortByAscendingAmount = cars => [...cars].sort((a,b) => itm1.amount > itm2.amount ? 1 : -1)\n\n//3\n// const sortByAscendingAmount = cars => [...cars].sort((a,b) => a.amount - b.amount)\n// console.table(sortByAscendingAmount(cars));\n\n// const numbers = [34, 20, 54, 1, 0];\n\n// numbers.sort((a,b) => {\n//   if (a > b) return 1;\n//   if (a < b) return -1;\n\n//   return 0\n// })\n\n// ```\n\nconsole.log('---Example 7---');\n\n// ## Example 7 - Метод sort\n\n// Нехай функція `sortByModel` повертає новий масив автомобілів відсортований\n// за назвою моделі в алфавітному та зворотному алфавітному порядку, в залежності від\n// значення параметра `order`.\n\n// ```js\nconst sortByModel = (cars, order) => {\n  //good\n  // if(order === 'asc') {\n  //   return [...cars].sort((a, b) => {\n  //     if(a.model > b.model) return 1;\n  //     if(a.model < b.model) return -1;\n  //     return 0\n  //   })\n  // } else if (order === 'desc') {\n  //   return [...cars].sort((a, b) => {\n  //     if(a.model > b.model) return -1;\n  //     if(a.model < b.model) return 1;\n  //     return 0\n  //   })\n  // }\n  // bad\n  // return [...cars].sort((a, b) => {\n  //   console.log('check')\n  //   if (order === 'desc') {\n  //     if(a.model > b.model) return -1;\n  //     if(a.model < b.model) return 1;\n  //   } else if (order === 'asc') {\n  //     if(a.model > b.model) return 1;\n  //     if(a.model < b.model) return -1;\n  //   }\n  // })\n};\n\n// console.table(sortByModel(cars, 'asc'));\n// console.table(sortByModel(cars, 'desc'));\n// ```\n\nconsole.log('---Example 8---');\n\n// ## Example 8 - Метод reduce\n\n// Нехай функція `getTotalAmount` повертає загальну кількість автомобілів (значення\n// властивостей `amount`).\n\n// ```js\nconst getTotalAmount = cars => {\n  return cars.reduce((acum, car, i, arr) => {\n    if (i === 0) {\n      acum.carsTotal = 0;\n      acum.totalOnSale = 0;\n    }\n\n    acum.carsTotal += car.amount;\n\n    // acum.totalOnSale += car.onSale ? 1 : 0;\n    car.onSale ? (acum.totalOnSale += 1) : null;\n\n    return acum;\n  }, {});\n};\n\nconsole.log(getTotalAmount(cars));\n// ```\n\nconsole.log('---Example 9---');\n\n// ## Example 9 - Ланцюжки методів\n\n// Нехай функція `getAvailableCarNames` повертає масив моделей автомобілів, але\n// тільки тих, які зараз на розпродажі.\n\n// ```js\n//1\n// const getModelsOnSale = cars => cars.filter(el => el.onSale).map(el => el.model);\n\n//2\nconst getModelsOnSale = cars => {\n  cars.filter(el => el.onSale).map(el => el.model);\n};\n\nconsole.table(getModelsOnSale(cars));\n// ```\n\nconsole.log('---Example 10---');\n\n// ## Example 10 - Ланцюжки методів\n\n// Нехай функція `getSortedCarsOnSale` повертає масив автомобілів на розпродажі\n// (Властивість onSale), відсортованих за зростанням ціни.\n\n// ```js\n// const getSortedCarsOnSale = cars => cars.filter(el => el.onSale).sort((a, b) => a.price - b.price);\n\nconst getSortedCarsOnSale = cars => {\n  return cars\n    .filter(el => el.onSale)\n    .sort((itm1, itm2) => {\n      if (itm1.price > itm2.price) return 1;\n      if (itm1.price < itm2.price) return -1;\n      return 0;\n    });\n};\n\n// console.table(getSortedCarsOnSale(cars));\n\n// ```\n\n/** Питання */\n// const allCourses = ['математика', 'физика', 'информатика', 'математика', 'физика', 'биология'];\n// const uniqueCourses = allCourses.filter((course, index, array) => array.indexOf(course) === index);\n\n[100, 34, 20, 500].sort((a, b) => {\n  return a - b;\n});\n\n// const tweets = [\n//   { id: \"000\", likes: 5, tags: [\"js\", \"nodejs\"] },\n//   { id: \"001\", likes: 2, tags: [\"html\", \"css\"] },\n//   { id: \"002\", likes: 17, tags: [\"html\", \"js\", \"nodejs\"] },\n//   { id: \"003\", likes: 8, tags: [\"css\", \"react\"] },\n//   { id: \"004\", likes: 0, tags: [\"js\", \"nodejs\", \"react\"] },\n// ];\n\n// Пройдемо по всіх елементах колекції і додамо значення властивості tags\n// до акумулятора, початкове значення якого вкажемо порожнім масивом [].\n// На кожній ітерації пушимо в акумулятор усі елементи tweet.tags і повертаємо його.\n// const tags = tweets.reduce((allTags, tweet) => {\n//   allTags.push(...tweet.tags);\n\n//   return allTags;\n// }, []);\n\n// console.log(tags);\n\n// Мабуть, збирання тегів - не одиночна операція, тому напишемо функцію\n// для збирання тегів з колекції\n// const getTags = tweets =>\n//   tweets.reduce((allTags, tweet) => {\n//     allTags.push(...tweet.tags);\n\n//     return allTags;\n//   }, []);\n\n// console.log(getTags(tweets));\n\n// Після того, як ми зібрали всі теги з постів, добре б було порахувати кількість унікальних тегів в масиві. І знову reduce стане в пригоді.\n\nconst tweets = [\n  { id: '000', likes: 5, tags: ['js', 'nodejs'] },\n  { id: '001', likes: 2, tags: ['html', 'css'] },\n  { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },\n  { id: '003', likes: 8, tags: ['css', 'react'] },\n  { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },\n];\n\nconst getTags = tweets =>\n  tweets.reduce((allTags, tweet) => {\n    allTags.push(...tweet.tags);\n\n    return allTags;\n  }, []);\n\nconst tags = getTags(tweets);\n\nconst uniqueCallback = (sum, tag, i, arr) => {\n  if (arr.indexOf(tag) === i) sum += 1;\n  return sum;\n};\nconst uniqueTagsAmount = tags.reduce(uniqueCallback, 0);\n\n// Винесемо callback-функцію окремо, а в reducе передамо посилання на неї.\n// Це стандартна практика, якщо callback-функція досить велика.\n\n// Якщо в об'єкті-акумуляторі acc відсутня своя властивість з ключем tag,\n// то створюємо її і записуємо їй значення 0.\n// В іншому випадку збільшуємо значення на 1.\n// const getTagStats = (acc, tag) => {\n//   if (!acc.hasOwnProperty(tag)) {\n//     acc[tag] = 0;\n//   }\n\n//   acc[tag] += 1;\n\n//   return acc;\n// };\n\n// Початкове значення акумулятора - це порожній об'єкт {}\nconst countTags = tags =>\n  tags.reduce((acc, tag) => {\n    if (!acc[tag]) {\n      acc[tag] = 0;\n    }\n\n    acc[tag] += 1;\n\n    return acc;\n  }, {});\n\nconst tagCount = countTags(tags);\nconsole.log(tagCount);\n\n// function printContactsInfo({ names, phones }) {\n//   const nameList = names.split(',');\n//   const phoneList = phones.split(',');\n\n//   console.log(nameList[2], phoneList[2])\n\n//   nameList.forEach((name, i) => {\n//     console.log(`${nameList[i]}:${phoneList[i]}`);\n//   })\n// }\n\n// printContactsInfo({\n//   names: 'Jacob,William,Solomon,Artemis',\n//   phones: '89001234567,89001112233,890055566377,890055566300',\n// });\n\nconst array = ['Jacob', 'William', 'Solomon', 'Artemis'];\nconsole.log(array[2]);\n"],"names":["_arrayLikeToArray","arr","len","console","log","cars","make","model","type","amount","price","onSale","getModels","carsArray","map","param","applySale","sale","car","_objectSpread","getCarsOnSale","carsArr","filter","el","sortByModel","order","getTotalAmount","cars1","reduce","acum","i","carsTotal","totalOnSale","getModelsOnSale","cars2","table","getSortedCarsOnSale","cars3","sort","itm1","itm2","a","b","tweets","id","likes","tags","getTags","tweets1","allTags","tweet","_allTags","push","apply","_toConsumableArray","uniqueCallback","sum","tag","indexOf","uniqueTagsAmount","countTags","tags1","acc","tagCount","array"],"version":3,"file":"08-module-4_iterative_methods_lesson-8.176de2a2.js.map"}