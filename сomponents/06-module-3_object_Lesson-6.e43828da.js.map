{"mappings":"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","sources":["src/js/06-module-3_object_Lesson-6.js"],"sourcesContent":["console.log('Модуль 3 Заняття 6. Деструктуризація та rest/spread');\n\n/** Кахут */\n// const user = {\n//   username: \"Grut\"\n//   //... 100\n// }\n\n// const {username} = user\n\n// function foo({username} = {}) {\n//   console.log(username)\n// }\n\n// foo()\n/** ---------------- */\n\nconsole.log('---Example 1---');\n\n// ## Example 1 - Деструктуризація\n\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору\n// незалежних аргументів.\n\n// ```js\nfunction calcBMI({ weight, height }) {\n  const numericWeight = Number(weight.replace(',', '.'));\n  const numericHeight = Number(height.replace(',', '.'));\n  return Number((numericWeight / numericHeight ** 2).toFixed(1));\n}\n\nconsole.log(\n  calcBMI({\n    weight: '88,3',\n    height: '1.75',\n  })\n);\nconsole.log(\n  calcBMI({\n    weight: '68,3',\n    height: '1.65',\n  })\n);\nconsole.log(\n  calcBMI({\n    weight: '118,3',\n    height: '1.95',\n  })\n);\n// const user = {\n//   weight: '88,3',\n//   height: '1.75',\n// };\n\n// // Було\n// console.log(calcBMI('88,3', '1.75'));\n// // console.log(calcBMI('68,3', '1.65'));\n// // console.log(calcBMI('118,3', '1.95'));\n\n// // Очікується\n// ```\n\nconsole.log('---Example 2---');\n\n// ## Example 2 - Деструктуризація\n\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору\n// незалежних аргументів.\n\n// ```js\n\nconst userA = {\n  name: 'John',\n  surname: 'Smith',\n  age: 24,\n};\n\nfunction printUser({ name, surname, age = 'unknow' } = {}) {\n  console.log(`User is ${name} ${surname}, his age is ${age}`);\n}\n\nfunction hello(hey = 'No argument') {\n  console.log(hey);\n}\n\nprintUser(userA);\nprintUser();\n\nhello('asdsadsad');\nhello();\n\n// function hello() {\n//   console.log('hello');\n// }\n// hello(1, 2, 34, 55);\n\nfunction printContactsInfo({ names = '', phones = '' } = {}) {\n  console.log(names, phones);\n  const nameList = names.split(',');\n  const phoneList = phones.split(',');\n\n  for (let i = 0; i < nameList.length; i += 1) {\n    console.log(`${nameList[i]}: ${phoneList[i]}`);\n  }\n}\n\n// // Очікується\nprintContactsInfo({\n  names: 'Jacob,William,Solomon,Artemis',\n  phones: '89001234567,89001112233,890055566377,890055566300',\n});\n\n// // Було\n// // printContactsInfo(\n// //   'Jacob,William,Solomon,Artemis',\n// //   '89001234567,89001112233,890055566377,890055566300',\n// // );\n\n// printContactsInfo()\n\n// ```\n\nconsole.log('---Example 3---');\n\n// ## Example 3 - Глибока деструктуризація\n\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору\n// незалежних аргументів.\n\n// ```js\n// function getBotReport(companyName, repairBots, defenceBots) {\n//   return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n// }\n\nfunction getBotReport({\n  companyName,\n  bots: { repair: repairBots, defence: defenceBots },\n}) {\n  return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n}\n\nconst boatCompany = {\n  companyName: 'Cyberdyne Systems',\n  bots: {\n    repair: 150,\n    defence: 50,\n  },\n};\n\n// // Було\n// console.log(getBotReport('Cyberdyne Systems', 150, 50));\n\n// // Очікується\nconsole.log(getBotReport(boatCompany)); // \"Cyberdyne Systems has 200 bots in stock\"\n// ```\n\nconsole.log('---Example 4---');\n\n// ## Example 4 - Деструктуризація\n\n// Напиши функцію, що приймає об'єкт параметрів із властивостями\n// `companyName` та `stock` та виводить звіт про кількість товарів на складі будь-якої\n// компанії.\n\n// ```js\nfunction getStockReport({ companyName, stock }) {\n  let stockAmount = 0;\n\n  console.log(companyName);\n  console.log(stock);\n\n  const stockValues = Object.values(stock);\n  console.log(stockValues);\n\n  for (const value of stockValues) {\n    stockAmount += value;\n  }\n\n  return `${companyName} has ${stockAmount} bots`;\n}\n\nconst company1 = {\n  companyName: 'Cyberdyne Systems',\n  stock: {\n    repairBots: 150,\n    defenceBots: 50,\n    defenceBots2: 50,\n    defenceBots1: 50,\n  },\n};\n\nconst report = getStockReport(company1);\nconsole.log(report);\n\n// console.log(\n//   getStockReport({\n//     companyName: 'Cyberdyne Systems',\n//     stock: {\n//       repairBots: 150,\n//       defenceBots: 50,\n//     },\n//   }),\n// ); // \"Cyberdyne Systems has 200 items in stock\"\n\n// console.log(\n//   getStockReport({\n//     companyName: 'Belacci',\n//     stock: {\n//       shoes: 20,\n//       skirts: 10,\n//       hats: 5,\n//     },\n//   }),\n// ); // \"Belacci has 35 item in stock\"\n// ```\n\nconsole.log('---Example 5---');\n\n// ## Example 5 - Операція spread\n\n// Доповни функцію `createContact(partialContact)` так, щоб вона повертала новий\n// об'єкт контакту з доданими властивостями `id` та `createdAt`, а також `list` зі\n// значенням \"default\" якщо в `partialContact` немає такої властивості.\n\n// ```js\n//1\nfunction createContact({ name, email, list = 'default' }) {\n  return {\n    name,\n    email,\n    list,\n    id: generateId(),\n    createdAt: Date.now(),\n  };\n}\n\n//2\nfunction createContact(partialContact) {\n  return {\n    list: 'default',\n    ...partialContact,\n    id: generateId(),\n    createdAt: Date.now(),\n  };\n}\n\nconst contact1 = {\n  name: 'Mango',\n  email: 'mango@mail.com',\n  list: 'friends',\n};\n\nconst newContact = createContact(contact1);\nconsole.log(newContact);\n\n// console.log(\n//   createContact({\n//     name: 'Mango',\n//     email: 'mango@mail.com',\n//     list: 'friends',\n//   }),\n// );\nconsole.log(\n  createContact({\n    name: 'Poly',\n    email: 'poly@hotmail.com',\n  })\n);\n\nfunction generateId() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n// ```\n\nconsole.log('---Example 6---');\n\n// ## Example 6 - Операція rest\n\n// Напиши функцію `transformUsername(user)` так, щоб вона повертала новий об'єкт із властивістю\n// `fullName`, замість `firstName` та `lastName`.\n\n// ```js\nfunction transformUsername({ firstName, lastName, ...props }) {\n  return {\n    ...props,\n    fullName: `${firstName} ${lastName}`,\n  };\n}\n\nconst user1 = {\n  id: 1,\n  firstName: 'Jacob',\n  lastName: 'Mercer',\n  email: 'j.mercer@mail.com',\n  friendCount: 40,\n};\n\nconst newUser = transformUsername(user1);\nconsole.log(newUser);\n\n// console.log(\n//   transformUsername({\n//     id: 1,\n//     firstName: 'Jacob',\n//     lastName: 'Mercer',\n//     email: 'j.mercer@mail.com',\n//     friendCount: 40,\n//   }),\n// );\n\n// console.log(\n//   transformUsername({\n//     id: 2,\n//     firstName: 'Adrian',\n//     lastName: 'Cross',\n//     email: 'a.cross@hotmail.com',\n//     friendCount: 20,\n//   }),\n// );\n// ```\n\n// //Ліво - rest\n// function multiply(...args) {\n//   const name = 'Artem';\n//   console.log(args); // массив всех аргументов\n\n//   return {};\n// }\n\n// //Право - spread\n// const third = {\n//   propB: 20,\n//   ...first,\n//   ...second,\n// };\n\n// console.log(third); // { propA: 5, propB: 10, propC: 15 }\n\nconsole.log('------');\n\nfunction countProps(object) {\n  // Change code below this line\n  let propCount = 0;\n\n  const keys = Object.keys(object);\n  for (const key of keys) {\n    propCount += 1;\n  }\n\n  return propCount;\n  // Change code above this line\n}\n\n// function countProps(object) {\n//   // Change code below this line\n//   let propCount = 0;\n\n//   for (const key in object) {\n//     if (object.hasOwnProperty(key)) {\n//       propCount += 1;\n//     }\n//   }\n\n//   return propCount;\n//   // Change code above this line\n// }\n\nconsole.log('------');\n\nconst products = [\n  { name: 'Radar', price: 1300, quantity: 4 },\n  { name: 'Scanner', price: 2700, quantity: 3 },\n  { name: 'Droid', price: 400, quantity: 7 },\n  { name: 'Grip', price: 1200, quantity: 9 },\n];\n\nfunction getAllPropValues(propName) {\n  // Change code below this line\n  const totalArray = [];\n\n  // for (let product of products) {\n  //   if (product.hasOwnProperty(propName)) {\n  //     totalArray.push(product[propName]);\n  //   }\n  // }\n  for (let product of products) {\n    if (product[propName]) {\n      totalArray.push(product[propName]);\n    }\n  }\n  return totalArray;\n\n  // Change code above this line\n}\n\nconsole.log(getAllPropValues('name'));\nconsole.log(getAllPropValues('quantity'));\nconsole.log(getAllPropValues('price'));\nconsole.log(getAllPropValues('category'));\n\nconsole.log('------');\n"],"names":["$30f0c7a2bb8f9c90$var$calcBMI","weight","height","numericWeight","Number","replace","numericHeight","toFixed","console","log","$30f0c7a2bb8f9c90$var$printUser","name","surname","age","$30f0c7a2bb8f9c90$var$hello","hey","names","phones","nameList","split","phoneList","i","length","$30f0c7a2bb8f9c90$var$printContactsInfo","companyName","bots","repair","repairBots","defence","defenceBots","$30f0c7a2bb8f9c90$var$getBotReport","$30f0c7a2bb8f9c90$var$report","stock","stockAmount","stockValues","Object","values","value","$30f0c7a2bb8f9c90$var$getStockReport","defenceBots2","defenceBots1","$30f0c7a2bb8f9c90$var$createContact","email","list","id","$30f0c7a2bb8f9c90$var$generateId","createdAt","Date","now","partialContact","$30f0c7a2bb8f9c90$var$newContact","Math","random","toString","substr","$30f0c7a2bb8f9c90$var$newUser","firstName","lastName","props","fullName","$30f0c7a2bb8f9c90$var$transformUsername","friendCount","$30f0c7a2bb8f9c90$var$products","price","quantity","$30f0c7a2bb8f9c90$var$getAllPropValues","propName","totalArray","product","push"],"version":3,"file":"06-module-3_object_Lesson-6.e43828da.js.map"}