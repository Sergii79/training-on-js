{"mappings":"AAAAA,QAAQC,IAAI,mBAaZ,MAAMC,EACK,UADLA,EAEM,WAGZ,IAAIC,EAAgB,EAMpB,MAAMC,EAAU,CAEOC,QAAZ,EAGQC,aAAH,GAMdC,kBAAiB,CAACC,EAAQC,KACxBN,GAAiB,EAEV,CACLK,OAAQA,EACRC,KAAMA,EACNC,GAAIP,IAURQ,QAAQH,GACNI,KAAKP,SAAWG,EAChB,MAAMK,EAAiBD,KAAKL,kBAC1BC,EACAN,GAEFU,KAAKN,aAAaQ,KAAKD,E,EAYzBE,SAASP,GACPI,KAAKP,SAAWG,EAChBI,KAAKN,aAAaQ,KAChBF,KAAKL,kBAAkBC,EAAQN,G,EAInCc,oBACE,IAAIC,EAAYL,KAAKN,aAAa,GAAGE,OACjCU,EAAW,EAEf,IAAK,IAAIC,KAAeP,KAAKN,aAAc,CACzC,MAAMc,EAAkBC,OAAOC,KAAKH,GAEpC,IAAK,IAAII,KAAOH,EACdpB,QAAQC,IAAIsB,EAAKJ,EAAYI,IAG3BJ,EAAYX,OAASS,IACvBA,EAAYE,EAAYX,OACxBU,EAAWN,KAAKN,aAAakB,QAAQL,G,CAIzC,OAAOP,KAAKN,aAAaY,E,EAM3BO,aACE,OAAOb,KAAKP,O,EAGdqB,oBACE1B,QAAQC,IAAIW,KAAKN,a,EAMnBqB,sBAAsBjB,GACpB,IAAK,IAAIkB,KAAQhB,KAAKN,aACpB,GAAIsB,EAAKlB,KAAOA,EAAI,OAAOkB,EAG7B,MAAO,E,EAOTC,oBAAoBpB,GAClB,IAAIqB,EAAS,EAEb,IAAK,IAAIF,KAAQhB,KAAKN,aAChBsB,EAAKnB,OAASA,IAChBT,QAAQC,IAAI2B,GACZE,GAAUF,EAAKpB,QAInB,OAAOsB,C,GAKX1B,EAAQO,QAAQ,KAChBP,EAAQO,QAAQ,KAChBP,EAAQO,QAAQ,KAEhBP,EAAQW,SAAS,KACjBX,EAAQW,SAAS,KACjBX,EAAQW,SAAS,IACjBX,EAAQsB,oBAER,MAAMK,EAAiB3B,EAAQqB,aAC/BzB,QAAQC,IAAI,oBAAqB8B,GAEjC,MAAMC,EAAW5B,EAAQY,oBACzBhB,QAAQC,IAAI,qBAAsB+B,GAQlC,MAAMC,EAAe7B,EAAQyB,oBAAoB3B,GACjDF,QAAQC,IAAIgC,GAEZ,MAAMC,EAAgB9B,EAAQyB,oBAAoB3B,GAClDF,QAAQC,IAAIiC","sources":["src/js/06-module-3_object_Lesson-6.js"],"sourcesContent":["console.log('---Example 4---');\n\n// ## Example 4 - Комплексні завдання\n\n// Напиши скрипт управління особистим кабінетом інтернет банку. Є об'єкт `account`\n// в якому необхідно реалізувати методи для роботи з балансом та історією\n// транзакцій.\n\n// ```js\n// /*\n//  * Типів транзакцій всього два.\n//  * Можна покласти чи зняти гроші з рахунку.\n//  */\nconst TransactionTypes = {\n  DEPOSIT: 'deposit',\n  WITHDRAW: 'withdraw',\n};\n\nlet transactionId = 1;\n\n// /*\n//  * Кожна транзакція це об'єкт із властивостями: id, type та amount\n//  */\n\nconst account = {\n  // Поточний баланс рахунку\n  balance: 0,\n\n  // Історія транзакцій\n  transactions: [],\n\n  /*\n   * Метод створює та повертає об'єкт транзакції.\n   * Приймає суму та тип транзакції.\n   */\n  createTransaction(amount, type) {\n    transactionId += 1;\n\n    return {\n      amount: amount,\n      type: type,\n      id: transactionId,\n    };\n  },\n\n  /*\n   * Метод, що відповідає за додавання суми до балансу.\n   * Приймає суму транзакції.\n   * Викликає createTransaction для створення об'єкта транзакції\n   * після чого додає його до історії транзакцій\n   */\n  deposit(amount) {\n    this.balance += amount;\n    const newTransaction = this.createTransaction(\n      amount,\n      TransactionTypes.DEPOSIT\n    );\n    this.transactions.push(newTransaction);\n  },\n\n  /*\n   * Метод, що відповідає за зняття суми з балансу.\n   * Приймає суму транзакції.\n   * Викликає createTransaction для створення об'єкта транзакції\n   * після чого додає його до історії транзакцій.\n   *\n   * Якщо amount більше ніж поточний баланс, виводь повідомлення\n   * про те, що зняття такої суми не можливе, недостатньо коштів.\n   */\n  withdraw(amount) {\n    this.balance -= amount;\n    this.transactions.push(\n      this.createTransaction(amount, TransactionTypes.WITHDRAW)\n    );\n  },\n\n  getMinTransaction() {\n    let minAmount = this.transactions[0].amount;\n    let minIndex = 0;\n\n    for (let transaction of this.transactions) {\n      const transactionKeys = Object.keys(transaction);\n\n      for (let key of transactionKeys) {\n        console.log(key, transaction[key]);\n      }\n\n      if (transaction.amount < minAmount) {\n        minAmount = transaction.amount;\n        minIndex = this.transactions.indexOf(transaction);\n      }\n    }\n\n    return this.transactions[minIndex];\n  },\n\n  /*\n   * Метод повертає поточний баланс\n   */\n  getBalance() {\n    return this.balance;\n  },\n\n  printTransactions() {\n    console.log(this.transactions);\n  },\n\n  /*\n   * Метод шукає та повертає об'єкт транзакції по id\n   */\n  getTransactionDetails(id) {\n    for (let item of this.transactions) {\n      if (item.id === id) return item;\n    }\n\n    return {};\n  },\n\n  /*\n   * Метод повертає кількість коштів\n   * певного типу транзакції з усієї історії транзакцій\n   */\n  getTransactionTotal(type) {\n    let result = 0;\n\n    for (let item of this.transactions) {\n      if (item.type === type) {\n        console.log(item);\n        result += item.amount;\n      }\n    }\n\n    return result;\n  },\n};\n// ```\n\naccount.deposit(1000);\naccount.deposit(500);\naccount.deposit(300);\n\naccount.withdraw(100);\naccount.withdraw(400);\naccount.withdraw(50);\naccount.printTransactions();\n\nconst currentbalance = account.getBalance();\nconsole.log('currentBalance = ', currentbalance);\n\nconst minTrans = account.getMinTransaction();\nconsole.log('Min Transaction = ', minTrans);\n\n// const transaction = account.getTransactionDetails(3);\n// const transaction1 = account.getTransactionDetails(1);\n\n// console.log(transaction)\n// console.log(transaction1)\n\nconst totalDeposit = account.getTransactionTotal(TransactionTypes.DEPOSIT);\nconsole.log(totalDeposit);\n\nconst totalWithdraw = account.getTransactionTotal(TransactionTypes.WITHDRAW);\nconsole.log(totalWithdraw);\n"],"names":["console","log","$30f0c7a2bb8f9c90$var$TransactionTypes","$30f0c7a2bb8f9c90$var$transactionId","$30f0c7a2bb8f9c90$var$account","balance","transactions","createTransaction","amount","type","id","deposit","this","newTransaction","push","withdraw","getMinTransaction","minAmount","minIndex","transaction","transactionKeys","Object","keys","key","indexOf","getBalance","printTransactions","getTransactionDetails","item","getTransactionTotal","result","$30f0c7a2bb8f9c90$var$currentbalance","$30f0c7a2bb8f9c90$var$minTrans","$30f0c7a2bb8f9c90$var$totalDeposit","$30f0c7a2bb8f9c90$var$totalWithdraw"],"version":3,"file":"06-module-3_object_Lesson-6.81896701.js.map"}