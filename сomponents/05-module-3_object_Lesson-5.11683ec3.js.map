{"mappings":"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","sources":["src/js/05-module-3_object_Lesson-5.js"],"sourcesContent":["console.log(\"Модуль 3. Заняття 1. Об'єкти\");\n\n// ## Example 1 - Основи об'єктів\n\n// Напиши скрипт, який для об'єкта `user`, послідовно:\n\n// - додає поле `mood` зі значенням `'happy'`\n// - замінює значення `hobby` на `'skydiving'`\n// - замінює значення `premium` на `false`\n// - виводить вміст об'єкта `user` у форматі `ключ:значення` використовуючи\n//   `Object.keys()` та `for...of`\n\n// ### Код\n\nconsole.log('---Example 1---');\n\n// ```js\nconst user = {\n  name: 'Mango',\n  age: 20,\n  hobby: 'html',\n  premium: true,\n};\n\nuser.mood = 'happy';\nuser.hobby = 'skydiving';\nuser.premium = !user.premium;\n\nconsole.log(user);\n\nconst userKeys = Object.keys(user);\nconsole.log(userKeys.length);\n\nfor (const key of userKeys) {\n  console.log(`${key} : ${user[key]}`);\n}\n// ```\n\nconsole.log('---Example 2---');\n\n// ## Example 2 - метод Object.values()\n\n// У нас є об'єкт, де зберігаються зарплати нашої команди. Напишіть код для\n// підсумовування всіх зарплат і збережіть результат у змінній sum. Повинно\n// вийти 390. Якщо об'єкт `salaries` порожній, то результат має бути 0.\n\n// ### Код\n\n// ```js\nconst salaries = {\n  John: 100,\n  Ann: 160,\n  Pete: 130,\n};\n\nlet sum = 0;\n\nconst salariesValues = Object.values(salaries);\nfor (let value of salariesValues) {\n  sum += value;\n}\n\nconsole.log(salariesValues, sum);\n\n// ```\n\nconsole.log('---Example 3---');\n\n// ## Example 3 - Масив об'єктів\n\n// Напишіть функцію `calcTotalPrice(stones, stoneName)`, яка приймає масив\n// об'єктів та рядок з назвою каменю. Функція рахує і повертає загальну вартість\n// каміння з таким ім'ям, ціною та кількістю з об'єкта\n\n// ### Код\n/**\n * 1. Створити функцію яка приймає обʼєктів і рядок(імя бажаного каменю)\n * 2. Знайти із масиву обʼєктів бажаний камень\n * 3. Порахувати його загальну вартість\n * 4. Повернути вартість із функції\n */\n\n// ```js\nconst stones = [\n  { name: 'Смарагд', price: 1300, quantity: 4 },\n  { name: 'Діамант', price: 2700, quantity: 3 },\n  { name: 'Сапфір', price: 400, quantity: 7 },\n  { name: 'Щебінь', price: 200, quantity: 2 },\n];\n\nfunction calcTotalPrice(array, stoneName) {\n  //1\n  let stone;\n\n  for (let item of array) {\n    if (item.name === stoneName) {\n      stone = item;\n      break;\n    }\n  }\n\n  if (!stone) return 0;\n\n  return stone.price * stone.quantity;\n}\n\nconst result = calcTotalPrice(stones, 'Сапфір');\nconsole.log(result);\n// ```\n\nconsole.log('---Example 4---');\n\n// ## Example 4 - Комплексні завдання\n\n// Напиши скрипт управління особистим кабінетом інтернет банку. Є об'єкт `account`\n// в якому необхідно реалізувати методи для роботи з балансом та історією\n// транзакцій.\n\n// ```js\n// /*\n//  * Типів транзакцій всього два.\n//  * Можна покласти чи зняти гроші з рахунку.\n//  */\nconst TransactionTypes = {\n  DEPOSIT: 'deposit',\n  WITHDRAW: 'withdraw',\n};\n\nlet transactionId = 1;\n\n// /*\n//  * Кожна транзакція це об'єкт із властивостями: id, type та amount\n//  */\n\nconst account = {\n  // Поточний баланс рахунку\n  balance: 0,\n\n  // Історія транзакцій\n  transactions: [],\n\n  /*\n   * Метод створює та повертає об'єкт транзакції.\n   * Приймає суму та тип транзакції.\n   */\n  createTransaction(amount, type) {\n    transactionId += 1;\n\n    return {\n      amount: amount,\n      type: type,\n      id: transactionId,\n    };\n  },\n\n  /*\n   * Метод, що відповідає за додавання суми до балансу.\n   * Приймає суму транзакції.\n   * Викликає createTransaction для створення об'єкта транзакції\n   * після чого додає його до історії транзакцій\n   */\n  deposit(amount) {\n    this.balance += amount;\n    const newTransaction = this.createTransaction(\n      amount,\n      TransactionTypes.DEPOSIT\n    );\n    this.transactions.push(newTransaction);\n  },\n\n  /*\n   * Метод, що відповідає за зняття суми з балансу.\n   * Приймає суму транзакції.\n   * Викликає createTransaction для створення об'єкта транзакції\n   * після чого додає його до історії транзакцій.\n   *\n   * Якщо amount більше ніж поточний баланс, виводь повідомлення\n   * про те, що зняття такої суми не можливе, недостатньо коштів.\n   */\n  withdraw(amount) {\n    this.balance -= amount;\n    this.transactions.push(\n      this.createTransaction(amount, TransactionTypes.WITHDRAW)\n    );\n  },\n\n  getMinTransaction() {\n    let minAmount = this.transactions[0].amount;\n    let minIndex = 0;\n\n    for (let transaction of this.transactions) {\n      const transactionKeys = Object.keys(transaction);\n\n      for (let key of transactionKeys) {\n        console.log(key, transaction[key]);\n      }\n\n      if (transaction.amount < minAmount) {\n        minAmount = transaction.amount;\n        minIndex = this.transactions.indexOf(transaction);\n      }\n    }\n\n    return this.transactions[minIndex];\n  },\n\n  /*\n   * Метод повертає поточний баланс\n   */\n  getBalance() {\n    return this.balance;\n  },\n\n  printTransactions() {\n    console.log(this.transactions);\n  },\n\n  /*\n   * Метод шукає та повертає об'єкт транзакції по id\n   */\n  getTransactionDetails(id) {\n    for (let item of this.transactions) {\n      if (item.id === id) return item;\n    }\n\n    return {};\n  },\n\n  /*\n   * Метод повертає кількість коштів\n   * певного типу транзакції з усієї історії транзакцій\n   */\n  getTransactionTotal(type) {\n    let result = 0;\n\n    for (let item of this.transactions) {\n      if (item.type === type) {\n        console.log(item);\n        result += item.amount;\n      }\n    }\n\n    return result;\n  },\n};\n// ```\n\naccount.deposit(1000);\naccount.deposit(500);\naccount.deposit(300);\n\naccount.withdraw(100);\naccount.withdraw(400);\naccount.withdraw(50);\naccount.printTransactions();\n\nconst currentbalance = account.getBalance();\nconsole.log('currentBalance = ', currentbalance);\n\nconst minTrans = account.getMinTransaction();\nconsole.log('Min Transaction = ', minTrans);\n\n// const transaction = account.getTransactionDetails(3);\n// const transaction1 = account.getTransactionDetails(1);\n\n// console.log(transaction)\n// console.log(transaction1)\n\nconst totalDeposit = account.getTransactionTotal(TransactionTypes.DEPOSIT);\nconsole.log(totalDeposit);\n\nconst totalWithdraw = account.getTransactionTotal(TransactionTypes.WITHDRAW);\nconsole.log(totalWithdraw);\n\n/**\n * питання\n */\n\n/*\n * короткий запис властивостей\n */\nconst username = 'Mango';\nconst email = 'mango@mail.com';\n\nconst signupData = {\n  username,\n  email,\n};\n\n/*\n * обчислювальні властивості\n */\n\nconst inputName = 'color';\nconst inputValue = 'tomato';\n\nconst colorPickerData = {\n  [inputName]: inputValue,\n};\n\nconsole.log(colorPickerData);\n\ncolorPickerData.color;\ncolorPickerData['color'];\n\nfunction countProps(object = { name: 'Mango', age: 2 }) {\n  // function countProps(object) {\n  let propCount = 0;\n  // Change code below this line\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      propCount += 1;\n    }\n  }\n  // Change code above this line\n  return propCount;\n}\n\nconsole.log(countProps({ name: 'Mango', age: 2 }));\nconsole.log(countProps({ mail: 'poly@mail.com', isOnline: true, score: 500 }));\n\ncountProps();\n// Чи вірно я розумію напис function countProps(object) це об'єкт який знакодиться у функції?\n//і це можна замінити таким  написом?\n\n// \"Поясніть теорію МЕТОДИ ОБ\"\"ЄКТІВ\n// const bookShelf = {\n//   books: [\"The Last Kingdom\", \"Dream Guardian\"],\n\n//   // Це метод об'єкта\n//   getBooks() {\n//     return this.books\n//     // console.log(\"\"Цей метод буде повертати всі книги - властивість books\"\");\n//   },\n//   // Це метод об'єкта\n//   addBook(bookName) {\n//     this.books.push(bookName)\n//     // console.log(\"\"Цей метод буде додавати нову книгу у властивість books\"\");\n//   },\n// };\n\n// // Виклики методів\n// bookShelf.getBooks();\n// bookShelf.addBook(\"Нова книга\");\n\nconst bookShelf = {\n  books: ['The Last Kingdom'],\n  getBooks() {\n    return this.books;\n  },\n  addBook(bookName) {\n    this.books.push(bookName);\n  },\n  removeBook(bookName) {\n    const bookIndex = this.books.indexOf(bookName);\n    this.books.splice(bookIndex, 1);\n  },\n};\n\n// console.log(bookShelf.getBooks()); // [\"The Last Kingdom\"]\n// bookShelf.addBook(\"The Mist\");\n// bookShelf.addBook(\"Dream Guardian\");\n// console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'The Mist', 'Dream Guardian']\n// bookShelf.removeBook(\"The Mist\");\n// console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'Dream Guardian']\n\n// for (const key in object) {\n//   object.hasOwnProperty\n// }\n\nconst books = [\n  { title: 'The Last Kingdom', author: 'Bernard Cornwell', rating: 8.38 },\n  { title: 'На березі спокійних вод', author: 'Роберт Шеклі', rating: 8.51 },\n];\nfor (const book of books) {\n  for (let key of Object.keys(book)) {\n    console.log(key, book[key]);\n  }\n\n  // for (const key in book) {\n  //   console.log(key, book[key]);\n  // }\n\n  // console.log(book.title);\n  // console.log(book.author);\n  // console.log(book.rating);\n}\n"],"names":["console","log","$ede55d23632531cb$var$user","name","age","hobby","premium","$ede55d23632531cb$var$userKeys","Object","keys","length","key","$ede55d23632531cb$var$sum","$ede55d23632531cb$var$salariesValues","values","John","Ann","Pete","value","$ede55d23632531cb$var$result","array","stoneName","stone","item","price","quantity","$ede55d23632531cb$var$calcTotalPrice","$ede55d23632531cb$var$TransactionTypes","$ede55d23632531cb$var$transactionId","$ede55d23632531cb$var$account","balance","transactions","createTransaction","amount","type","id","deposit","this","newTransaction","push","withdraw","getMinTransaction","minAmount","minIndex","transaction","transactionKeys","key2","indexOf","getBalance","printTransactions","getTransactionDetails","getTransactionTotal","result1","$ede55d23632531cb$var$currentbalance","$ede55d23632531cb$var$minTrans","$ede55d23632531cb$var$totalDeposit","$ede55d23632531cb$var$totalWithdraw","$ede55d23632531cb$var$colorPickerData","color","$ede55d23632531cb$var$countProps","object","propCount","key3","hasOwnProperty","mail","isOnline","score","$ede55d23632531cb$var$books","title","author","rating","book","key1"],"version":3,"file":"05-module-3_object_Lesson-5.11683ec3.js.map"}