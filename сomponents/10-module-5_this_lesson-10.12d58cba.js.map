{"mappings":"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","sources":["src/js/10-module-5_this_lesson-10.js"],"sourcesContent":["console.log('# Модуль 5. Заняття 10. Прототипи та класи');\n\n// Кахут\n\n// class Animal {\n//   #privateProp = 'Secure';\n//   #printPrivateMessage() {\n//     console.log('private message')\n//   }\n\n//   static printMessage() {\n//     console.log('static method')\n//   }\n\n//   constructor(name) {\n//     // this = {} // imlicitly\n\n//     this.name = name\n//     //....\n\n//     // return this // implicitly\n//   }\n\n//   printHello() {\n//     console.log(this.name + ' hello')\n//   }\n// }\n\n// const rabbit = new Animal('Bunny');\n// rabbit.printMessage()\n\n// Animal.printMessage()\n\nconsole.log('---Example 1---');\n\n// ## Example 1 - Блогер\n\n// Напиши клас `Blogger` для створення об'єкта блогера з наступними властивостями:\n\n// - `email` - пошта, рядок\n// - `age` - вік, число\n// - `numberOfPosts` - кількість постів, число\n// - `topics` - масив тем на яких спеціалізується блогер\n\n// Клас чекає один параметр - об'єкт налаштувань з однойменними властивостями.\n\n// Додай метод `getInfo()`, який, повертає рядок:\n// `User ${пошта} is ${вік} years old and has ${кількість постів} posts`.\n\n// Додай метод `updatePostCount(value)`, який у параметрі `value` приймає\n// кількість постів, які потрібно додати користувачеві.\n\n// 1. створюємо клас з конструктором і обʼєктом параметрів\nclass Blogger {\n  constructor({ email, age, numberOfPosts, topics } = {}) {\n    this.email = email;\n    this.age = age;\n    this.numberOfPosts = numberOfPosts;\n    this.topics = topics;\n  }\n\n  getInfo() {\n    return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts`;\n  }\n\n  updatePostCount(value) {\n    this.numberOfPosts += value;\n  }\n}\n\nconst blogger = new Blogger({\n  email: 'mango@mail.com',\n  age: 24,\n  numberOfPosts: 20,\n  topics: ['tech', 'cooking'],\n});\n\nconsole.log(blogger);\n\nconsole.log(blogger.getInfo());\nblogger.updatePostCount(10);\nconsole.log(blogger.getInfo());\n\n// ```js\n// const mango = new User({\n//   name: 'mango@mail.com',\n//   age: 24,\n//   numberOfPosts: 20,\n//   topics: ['tech', 'cooking'],\n// });\n// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts\n// mango.updatePostCount(5);\n// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts\n\nconst poly = new Blogger({\n  email: 'poly@mail.com',\n  age: 19,\n  numberOfPosts: 17,\n  topics: ['sports', 'gaming', 'health'],\n});\n// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts\n// poly.updatePostCount(4);\n// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts\n// ```\n\nconsole.log('---Example 2---');\n\n// ## Example 2 - Сховище\n\n// Напиши клас `Storage` який створює об'єкти для керування складом товарів.\n// При виклику отримуватиме один аргумент - початковий масив товарів і записуватиме\n// його властивість `items`.\n\n// Додай методи класу:\n\n// - `getItems()` - повертає масив товарів.\n// - `addItem(item)` - отримує новий товар і додає його до поточних.\n// - `removeItem(item)` - отримує товар і, якщо він є, видаляє його з поточних.\n\nclass Storage {\n  constructor(goods) {\n    this._items = goods;\n  }\n\n  getItems() {\n    return this._items;\n  }\n\n  addItem(item) {\n    this._items.push(item);\n  }\n\n  removeItem(item) {\n    const index = this._items.indexOf(item);\n\n    if (index > -1) {\n      this._items.splice(index, 1);\n    }\n  }\n}\n\n// // ```js\nconst storage = new Storage(['🍎', '🍋', '🍇', '🍑']);\nconst items = storage.getItems();\nconsole.table(items); // [ '🍎', '🍋', '🍇', '🍑' ]\n\nstorage.addItem('🍌');\n// // console.table(storage.items); // [ '🍎', '🍋', '🍇', '🍑', '🍌' ]\n\n// storage.removeItem('🍋');\n// console.table(storage.getItems()); // [ '🍎', '🍇', '🍑', '🍌' ]\n// // ```\n\n// const courses = new Storage(['html', 'css', 'js', 'node']);\n// console.table(courses.getItems())\n\nconsole.log('---Example 3---');\n\n// ## Example 3 - User\n\n// Напиши клас `User` який створює об'єкт із властивостями `login` та `email`.\n// Оголоси приватні властивості `#login` та `#email`, доступ до яких зроби через\n// гетер та сетер `login` та `email`.\n\nconst permission = true;\n\nclass User {\n  #login;\n  #email;\n\n  constructor({ login, email }) {\n    this.#login = login;\n    this.#email = email;\n  }\n\n  get login() {\n    if (permission) {\n      return this.#login;\n    }\n\n    return 'нєєєє)';\n  }\n\n  set login(value) {\n    if (value.length < 5) {\n      this.#login = value;\n    }\n  }\n}\n\n// ```js\nconst mango = new User({\n  login: 'Mango',\n  email: 'mango@dog.woof',\n});\n\nconsole.log(mango.login); // Mango\nmango.login = 'dodo';\nconsole.log(mango.login); // Mangodoge\n\nconst polyNew = new User({\n  login: 'Poly',\n  email: 'poly@mail.com',\n});\n\nconsole.log(polyNew.login); // Poly\npolyNew.login = 'Polycutie';\nconsole.log(polyNew.login); // Polycutie\n// ```\n\nconsole.log('---Example 4---');\n\n// ## Example 4 - Нотатки\n\n// EXAMPLE items = [\n//   {\n//     text: 'asdsadsa',\n//     priority: 'LOW'\n//   },\n//   {\n//     text: 'asdsadsa',\n//     priority: 'LOW'\n//   }\n// ]\n\n// Напиши клас `Notes` який керує колекцією нотаток у властивості `items`.\n// Замітка це об'єкт із властивостями `text` та `priority`. Додай класу статичну\n// властивість `Priority`, у якому зберігатиметься об'єкт із пріоритетами.\n\nclass Notes {\n  static defaultText = 'ororororoor oro ro or o';\n  static Priority = {\n    LOW: 'low',\n    NORMAL: 'normal',\n    HIGH: 'high',\n  };\n\n  constructor() {\n    this.items = [];\n  }\n\n  addNote(note) {\n    this.items.push(note);\n  }\n\n  removeNote(text) {\n    const index = this.items.findIndex(el => el.text === text);\n    this.items.splice(index, 1);\n  }\n}\n\n// ```js\n// {\n//   LOW: 'low',\n//   NORMAL: 'normal',\n//   HIGH: 'high'\n// }\n// ```\n\n// Додай методи `addNote(note)`, `removeNote(text)` та\n// `updatePriority(text, newPriority)`.\n\n// ```js\nconst myNotes = new Notes();\nconsole.log(myNotes);\n\nmyNotes.addNote({\n  text: Notes.defaultText,\n  priority: Notes.Priority.LOW,\n});\n\nconsole.log(myNotes.items);\n\nmyNotes.addNote({\n  text: 'Моя друга замітка',\n  priority: Notes.Priority.NORMAL,\n});\nconsole.log(myNotes.items);\n\nmyNotes.removeNote('Моя друга замітка');\nconsole.log(myNotes.items);\n\n// myNotes.updateNote('Моя друга замітка', Notes.Priority.HIGH);\n// console.log(myNotes.items);\n// ```\n\nconsole.log('---Example 5---');\n\n// ## Example 5 - Toggle\n\n// Напишіть клас `Toggle` який приймає об'єкт налаштувань `{isOpen: boolean}` і\n// оголошує одну властивість `on` - стан вкл/викл (true/false). За замовчуванням\n// значення властивості `on` повинно бути `false`.\n\nclass Toggle {\n  constructor({ isOpen = false } = {}) {\n    this.on = isOpen;\n  }\n\n  toggle() {\n    this.on = !this.on;\n  }\n}\n\n// ```js\nconst firstToggle = new Toggle({ isOpen: true });\nconsole.group('firstToggle');\nconsole.log(firstToggle.on);\nfirstToggle.toggle();\nconsole.log(firstToggle.on);\nconsole.groupEnd('firstToggle');\n\nconst secondToggle = new Toggle();\nconsole.group('secondToggle');\nconsole.log(secondToggle.on);\nsecondToggle.toggle();\nconsole.log(secondToggle.on);\nconsole.groupEnd('secondToggle');\n\nconsole.log('---Example---');\n\n// const pizzaPalace = {\n//   pizzas: ['Supercheese', 'Smoked', 'Four meats'],\n//   // Change code below this line\n//   checkPizza(pizzaName) {\n//     return this.pizzas.includes(pizzaName);\n//   },\n//   order(pizzaName) {\n//     const isPizzaAvailable = this.checkPizza(pizzaName);\n\n//     if (!isPizzaAvailable) {\n//       return `Sorry, there is no pizza named «${pizzaName}»`;\n//     }\n\n//     return `Order accepted, preparing «${pizzaName}» pizza`;\n//   },\n//   // Change code above this line\n// };\n\nconst parent = {\n  name: 'Stacey',\n  surname: 'Moore',\n  age: 54,\n  heritage: 'Irish',\n};\n// Change code below this line\n\nconst child = Object.create(parent);\n\n// Change code above this line\nchild.name = 'Jason';\nchild.age = 27;\n"],"names":["_checkPrivateRedeclaration","obj","privateCollection","console","log","Blogger","ref","arguments","length","email","age","numberOfPosts","topics","this","key","concat","value","blogger","getInfo","updatePostCount","poly","Storage","goods","_items","item","push","index","indexOf","splice","storage","items","getItems","table","addItem","permission","_login","WeakMap","_email","User","param","login","_classPrivateFieldInit","_classPrivateFieldGet","_classPrivateFieldSet","mango","polyNew","Notes","note","text","findIndex","el","_defineProperty","LOW","NORMAL","HIGH","myNotes","addNote","defaultText","priority","Priority","removeNote","Toggle","_isOpen","isOpen","on","firstToggle","group","toggle","groupEnd","secondToggle","parent","name","surname","heritage","child","Object","create"],"version":3,"file":"10-module-5_this_lesson-10.12d58cba.js.map"}